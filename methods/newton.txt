def newton(fname, fpname, x0, tolx, tolf, nmax):
  """
  Implementa il metodo di Newton per il calcolo degli zeri di un'equazione non lineare.

  Parametri:
    fname: La funzione di cui si vuole calcolare lo zero.
    fpname: La derivata prima della funzione di  cui si vuole calcolare lo zero.
    x0: iterato iniziale
    tolx: La tolleranza di errore tra due iterati successivi
    tolf: tolleranza sul valore della funzione
    nmax: numero massimo di iterazione

  Restituisce:
    Lo zero approssimato della funzione, il numero di iterazioni e la lista degli iterati intermedi.
  """

  xk = []
  fx0 = fname(x0)
  if ___: 
    print(" derivata prima nulla in x0")
    return None, None, None
  
  d = ___ 
  x1 = ___ 
  
  fx1 = fname(x1)
  xk.append(x1)
  it = 1
  
  while ___: 
    x0 = ___ 
    fx0 = ___ 
    if ___: 
      print(" derivata prima nulla in x0")
      return None, None, None
    d = ___ 
      
    x1 = ___ 
    fx1 = fname(x1)
    it = it + 1
  
    xk.append(x1)
    
  if it == nmax:
    print('raggiunto massimo numero di iterazioni \n')
  
  return x1,it,xk


# abs(fpname(x0)) <= np.spacing(1)
# fx0 / fpname(x0)
# x0 - d
# it < nmax and abs(fx1) >= tolf and abs(d) >= tolx * abs(x1)
# x1
# fname(x0)
# abs(fpname(x0)) <= np.spacing(1)
# fx0 / fpname(x0)
# x0 - d