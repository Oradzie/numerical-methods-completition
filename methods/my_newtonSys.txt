def my_newtonSys(fun, jac, x0, tolx, tolf, nmax):
  """
  Funzione per la risoluzione del sistema F(x)=0
  mediante il metodo di Newton.

  Parametri
  ----------
  fun : funzione vettoriale contenente ciascuna equazione non lineare del sistema.
  jac : funzione che calcola la matrice Jacobiana della funzione vettoriale.
  x0 : array
    Vettore contenente l'approssimazione iniziale della soluzione.
  tolx : float
    Parametro di tolleranza per l'errore assoluto.
  tolf : float
    Parametro di tolleranza per l'errore relativo.
  nmax : int
    Numero massimo di iterazioni.

  Restituisce
  -------
  x : array
    Vettore soluzione del sistema (o equazione) non lineare.
  it : int
    Numero di iterazioni fatte per ottenere l'approssimazione desiderata.
  Xm : array
    Vettore contenente la norma dell'errore relativo tra due iterati successivi.
  """

  matjac = jac(x0)
  if ___: 
    print("La matrice dello Jacobiano calcolata nell'iterato precedente non è a rango massimo")
    return None, None, None

  s = ___ 
  it = 1
  x1 = ___ 
  fx1 = fun(x1)

  Xm = [np.linalg.norm(s, 1) / np.linalg.norm(x1, 1)]

  while ___: 
    x0 = ___ 
    it += 1
    matjac = jac(x0)
    if ___: 
      print("La matrice dello Jacobiano calcolata nell'iterato precedente non è a rango massimo")
      return None, None, None

   
    s = ___ 

    x1 = ___ 
    fx1 = fun(x1)
    Xm.append(np.linalg.norm(s, 1) / np.linalg.norm(x1, 1))

  return x1, it, Xm


# np.linalg.det(matjac) == 0
# -np.linalg.solve(matjac, fun(x0))
# x0 + s
# it <= nmax and np.linalg.norm(fx1, 1) >= tolf and np.linalg.norm(s, 1) >= tolx * np.linalg.norm(x1, 1)
# x1
# np.linalg.det(matjac) == 0
# -np.linalg.solve(matjac, fun(x0))
# x0 + s